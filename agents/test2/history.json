[
  {
    "role": "user",
    "content": "give me a python code for snake game",
    "timestamp": "2025-08-29T02:41:31.200979",
    "metadata": {}
  },
  {
    "role": "assistant",
    "content": "Below is a compact but full-featured implementation of the classic Snake game written in Python with the Pygame library.  \nSave it as snake.py, make sure you have Pygame installed (`pip install pygame`), and run with `python snake.py`.\n\n```python\nimport pygame, sys, random\n\n# ── CONFIGURATION ────────────────────────────────────────────────────────────\nCELL_SIZE      = 20                      # Width/height of a single square\nGRID_WIDTH     = 30                      # Number of cells horizontally\nGRID_HEIGHT    = 20                      # Number of cells vertically\nFPS            = 10                      # Game speed (frames per second)\n\n# Derived constants\nWINDOW_WIDTH   = GRID_WIDTH  * CELL_SIZE\nWINDOW_HEIGHT  = GRID_HEIGHT * CELL_SIZE\n\n# Colors\nBLACK  = (  0,   0,   0)\nWHITE  = (255, 255, 255)\nGREEN  = (  0, 255,   0)\nD_GREEN= (  0, 155,   0)\nRED    = (255,   0,   0)\nGRAY   = ( 40,  40,  40)\n\n# ── INITIALIZATION ──────────────────────────────────────────────────────────\npygame.init()\nscreen  = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))\nclock   = pygame.time.Clock()\nfont    = pygame.font.SysFont(None, 36)\npygame.display.set_caption(\"Snake\")\n\n# ── HELPER FUNCTIONS ────────────────────────────────────────────────────────\ndef draw_cell(pos, color):\n    x, y = pos\n    rect = pygame.Rect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE)\n    pygame.draw.rect(screen, color, rect)\n\ndef random_free_position(snake):\n    while True:\n        pos = (random.randrange(GRID_WIDTH), random.randrange(GRID_HEIGHT))\n        if pos not in snake:\n            return pos\n\ndef draw_grid():\n    for x in range(0, WINDOW_WIDTH, CELL_SIZE):\n        pygame.draw.line(screen, GRAY, (x, 0), (x, WINDOW_HEIGHT))\n    for y in range(0, WINDOW_HEIGHT, CELL_SIZE):\n        pygame.draw.line(screen, GRAY, (0, y), (WINDOW_WIDTH, y))\n\ndef show_text(text, color, center):\n    surface = font.render(text, True, color)\n    rect = surface.get_rect(center=center)\n    screen.blit(surface, rect)\n\n# ── GAME LOOP ───────────────────────────────────────────────────────────────\ndef main():\n    snake      = [(GRID_WIDTH//2, GRID_HEIGHT//2)]\n    direction  = (1, 0)                       # Start moving right\n    apple      = random_free_position(snake)\n    growing    = False\n    score      = 0\n\n    while True:\n        # ── INPUT ───────────────────────────────────────────────────────────\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit(); sys.exit()\n            elif event.type == pygame.KEYDOWN:\n                if event.key in (pygame.K_UP, pygame.K_w)    and direction != (0,  1):\n                    direction = (0, -1)\n                if event.key in (pygame.K_DOWN, pygame.K_s)  and direction != (0, -1):\n                    direction = (0,  1)\n                if event.key in (pygame.K_LEFT, pygame.K_a)  and direction != (1,  0):\n                    direction = (-1, 0)\n                if event.key in (pygame.K_RIGHT, pygame.K_d) and direction != (-1, 0):\n                    direction = (1,  0)\n                if event.key == pygame.K_r and game_over:    # Restart on 'R'\n                    return\n\n        # ── UPDATE ──────────────────────────────────────────────────────────\n        head_x, head_y = snake[0]\n        dx, dy         = direction\n        new_head       = ((head_x + dx) % GRID_WIDTH, (head_y + dy) % GRID_HEIGHT)\n\n        # Collision with self?\n        game_over = new_head in snake\n\n        if game_over:\n            screen.fill(BLACK)\n            show_text(\"GAME OVER\", RED,    (WINDOW_WIDTH//2, WINDOW_HEIGHT//2 - 20))\n            show_text(f\"Score: {score}\", WHITE,(WINDOW_WIDTH//2, WINDOW_HEIGHT//2 + 20))\n            show_text(\"Press R to Restart\", GRAY,(WINDOW_WIDTH//2, WINDOW_HEIGHT//2 + 60))\n            pygame.display.flip()\n            clock.tick(3)\n            continue  # Freeze until user presses R or exits\n\n        snake.insert(0, new_head)\n        if new_head == apple:\n            score   += 1\n            apple    = random_free_position(snake)\n            growing  = True\n        if not growing:\n            snake.pop()\n        growing = False\n\n        # ── DRAW ────────────────────────────────────────────────────────────\n        screen.fill(BLACK)\n        draw_grid()\n        for segment in snake:\n            draw_cell(segment, GREEN if segment == snake[0] else D_GREEN)\n        draw_cell(apple, RED)\n        show_text(str(score), WHITE, (30, 20))\n\n        pygame.display.flip()\n        clock.tick(FPS)\n\n# ── ENTRY POINT ─────────────────────────────────────────────────────────────\nif __name__ == \"__main__\":\n    while True:\n        main()    # Allows restart without having to relaunch the script\n```\n\nControls  \n• Arrow keys or WASD – move the snake  \n• The snake wraps around the edges (toggle off by removing the “% GRID_WIDTH/HEIGHT” parts if you want wall collisions).  \n• When you collide with yourself the game displays “GAME OVER”; press `R` to restart or close the window to quit.",
    "timestamp": "2025-08-29T02:41:41.334178",
    "metadata": {}
  }
]