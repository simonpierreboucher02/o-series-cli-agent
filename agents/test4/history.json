[
  {
    "role": "user",
    "content": "àgive me a python code for snake game",
    "timestamp": "2025-08-29T02:43:32.194974",
    "metadata": {}
  },
  {
    "role": "assistant",
    "content": "Here’s a simple Snake game implementation using Pygame. Save this as, for example, `snake.py`, install Pygame (`pip install pygame`), and run (`python snake.py`).\n\n```python\nimport pygame\nimport sys\nimport random\n\n# Initialize Pygame\npygame.init()\n\n# Screen dimensions\nWIDTH, HEIGHT = 640, 480\nCELL_SIZE = 20\n\n# Colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED   = (255, 0, 0)\nGREEN = (0, 255, 0)\n\n# Set up display\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"Snake Game\")\n\n# Clock for controlling the frame rate\nclock = pygame.time.Clock()\nFPS = 10\n\n# Font for score\nfont = pygame.font.SysFont(\"arial\", 24)\n\ndef draw_text(surface, text, color, x, y):\n    img = font.render(text, True, color)\n    surface.blit(img, (x, y))\n\ndef random_food_position():\n    x = random.randint(0, (WIDTH - CELL_SIZE) // CELL_SIZE) * CELL_SIZE\n    y = random.randint(0, (HEIGHT - CELL_SIZE) // CELL_SIZE) * CELL_SIZE\n    return x, y\n\ndef main():\n    # Initial snake: center of screen, length 3\n    snake = [(WIDTH//2, HEIGHT//2),\n             (WIDTH//2 - CELL_SIZE, HEIGHT//2),\n             (WIDTH//2 - 2*CELL_SIZE, HEIGHT//2)]\n    direction = (CELL_SIZE, 0)  # moving right\n\n    # Place first food\n    food = random_food_position()\n    score = 0\n\n    running = True\n    while running:\n        clock.tick(FPS)\n\n        # Event handling\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                running = False\n            elif event.type == pygame.KEYDOWN:\n                dx, dy = direction\n                if event.key == pygame.K_UP and dy == 0:\n                    direction = (0, -CELL_SIZE)\n                elif event.key == pygame.K_DOWN and dy == 0:\n                    direction = (0, CELL_SIZE)\n                elif event.key == pygame.K_LEFT and dx == 0:\n                    direction = (-CELL_SIZE, 0)\n                elif event.key == pygame.K_RIGHT and dx == 0:\n                    direction = (CELL_SIZE, 0)\n\n        # Move snake\n        head_x, head_y = snake[0]\n        dx, dy = direction\n        new_head = (head_x + dx, head_y + dy)\n        snake.insert(0, new_head)\n\n        # Check for collision with walls\n        if (new_head[0] < 0 or new_head[0] >= WIDTH or\n            new_head[1] < 0 or new_head[1] >= HEIGHT):\n            running = False\n\n        # Check for collision with self\n        if new_head in snake[1:]:\n            running = False\n\n        # Check if food eaten\n        if new_head == food:\n            score += 1\n            food = random_food_position()\n        else:\n            snake.pop()  # remove tail if no food eaten\n\n        # Draw everything\n        screen.fill(BLACK)\n        # draw snake\n        for segment in snake:\n            pygame.draw.rect(screen, GREEN,\n                             (segment[0], segment[1], CELL_SIZE, CELL_SIZE))\n        # draw food\n        pygame.draw.rect(screen, RED,\n                         (food[0], food[1], CELL_SIZE, CELL_SIZE))\n        # draw score\n        draw_text(screen, f\"Score: {score}\", WHITE, 10, 10)\n\n        pygame.display.flip()\n\n    # Game over screen\n    screen.fill(BLACK)\n    draw_text(screen, \"GAME OVER\", RED, WIDTH//2 - 80, HEIGHT//2 - 24)\n    draw_text(screen, f\"Final Score: {score}\", WHITE, WIDTH//2 - 90, HEIGHT//2 + 8)\n    pygame.display.flip()\n    pygame.time.wait(3000)\n\n    pygame.quit()\n    sys.exit()\n\nif __name__ == \"__main__\":\n    main()\n```\n\nHow it works:\n\n1. Sets up a grid of cells (`CELL_SIZE` x `CELL_SIZE`).\n2. Maintains a list of snake segments; the head is `snake[0]`.\n3. Moves the snake by inserting a new head based on the current direction.\n4. Checks for wall and self-collisions to end the game.\n5. Spawns food at a random grid-aligned position. Eating grows the snake.\n6. Renders the snake, food, and score each frame and caps the frame rate with `clock.tick(FPS)`.",
    "timestamp": "2025-08-29T02:43:45.266943",
    "metadata": {}
  }
]